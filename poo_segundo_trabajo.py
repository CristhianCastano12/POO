# -*- coding: utf-8 -*-
"""POO Segundo Trabajo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O4b3RTtr-eOU2NumEs1Y7wZZ8iiqazDW

EJERCICIO *2.2*
"""

from enum import Enum

class TipoPlaneta(Enum):
    GASEOSO = 1
    TERRESTRE = 2
    ENANO = 3

class Planeta:

    def __init__(
        self,
        nombre: str,
        cantidad_satelites: int,
        masa: float,
        volumen: float,
        diametro: int,
        distancia_sol_km: int,
        tipo: TipoPlaneta,
        es_observable: bool,
        periodo_orbital_anios: float,
        periodo_rotacion_dias: float,
    ):
        self.nombre = nombre
        self.cantidad_satelites = cantidad_satelites
        self.masa = masa
        self.volumen = volumen
        self.diametro = diametro
        self.distancia_sol_km = distancia_sol_km
        self.tipo = tipo
        self.es_observable = es_observable
        self.periodo_orbital_anios = periodo_orbital_anios
        self.periodo_rotacion_dias = periodo_rotacion_dias

    def imprimir(self) -> None:
        print(f"Nombre del planeta = {self.nombre}")
        print(f"Cantidad de satélites = {self.cantidad_satelites}")
        print(f"Masa del planeta (kg) = {self.masa}")
        print(f"Volumen del planeta (km^3) = {self.volumen}")
        print(f"Diámetro del planeta (km) = {self.diametro}")
        print(f"Distancia al Sol (km) = {self.distancia_sol_km}")
        print(f"Tipo de planeta = {self.tipo.name}")
        print(f"Es observable a simple vista = {self.es_observable}")
        print(f"Periodo orbital (años) = {self.periodo_orbital_anios}")
        print(f"Periodo de rotación (días) = {self.periodo_rotacion_dias}")

    def calcular_densidad(self) -> float:
        return self.masa / self.volumen if self.volumen != 0 else float("inf")

    def es_planeta_exterior(self) -> bool:
        UA_KM = 149_597_870
        limite_exterior_km = 3.4 * UA_KM
        return self.distancia_sol_km > limite_exterior_km

"""EJERCICIO 2.1"""

class Persona:
    def __init__(self, nombre: str, apellidos: str, numero_documento_identidad: str,
                 anio_nacimiento: int, pais_nacimiento: str, genero: str):
        # Validación mínima del género para mantener 'H' o 'M'
        genero = genero.upper().strip()
        if genero not in ("H", "M"):
            raise ValueError("El género debe ser 'H' o 'M'")

        self.nombre = nombre
        self.apellidos = apellidos
        self.numero_documento_identidad = numero_documento_identidad
        self.anio_nacimiento = anio_nacimiento
        self.pais_nacimiento = pais_nacimiento
        self.genero = genero

    def imprimir(self) -> None:
        print(f"Nombre = {self.nombre}")
        print(f"Apellidos = {self.apellidos}")
        print(f"Número de documento de identidad = {self.numero_documento_identidad}")
        print(f"Año de nacimiento = {self.anio_nacimiento}")
        print(f"País de nacimiento = {self.pais_nacimiento}")
        print(f"Género = {self.genero}")
        print()

if __name__ == "__main__":
    p1 = Persona("Pedro", "Pérez", "1053121010", 1998, "Colombia", "H")
    p2 = Persona("Luisa", "León", "1053223344", 2001, "México", "M")
    p1.imprimir()
    p2.imprimir()